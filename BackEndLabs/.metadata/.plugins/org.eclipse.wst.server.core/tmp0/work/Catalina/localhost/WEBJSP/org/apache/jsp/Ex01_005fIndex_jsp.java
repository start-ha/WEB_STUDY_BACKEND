/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.46
 * Generated at: 2025-09-22 01:40:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Date;

public final class Ex01_005fIndex_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


// !의미 : 이 페이지에서 사용하는 공통함수
//page scope 
public int add(int i, int j){ 
	
	return i+j;//이 함수 자체를 .class로 컴파일되서 클래스로 봄} 

}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");

//java 코드를 쓰는 영역	
//jsp 파일에서는 우리가 원하는 모든 작업 가능 (DB연결 > 실행 > 결과 > 화면 출력) > jsp (웹에서 필요한 모든 작업 가능)
//jsp 장점: 빠르고 , 쉬워요 ... 모든 개발자 쉽게 웹을 ....(ASP -> ASPX, PHP)
//단점: 분업화 힘들어요 , [유지보수] ( 모든 코드가 한곳에 ) >> 관심사가 분리 되어 있지 않아요 
  	
  	Date date = new Date();
  	/*  
  		JSP 페이지 : UI(html+css+javascript) + JAVA코드(<% 스크립트릿 안에 구현)
  		>> 디자인코드 + 서버의 로직코드 구현 : 문제점> 협업, 유지보수 하기 어려워요 
  		
		생성순서
  		servlet(형) 근본 JAVA파일, DB연결 등에 특화됨 > 웹 전용 java 파일 > jsp(동생)
  		>>java 웹 기반 기술이 아니예요 > 계산기 , 그림판 , 원도우 프로그램(awt , swing--버튼 그리는 툴) > 웹 전향(객체:request,response)
  		>>java 페이지 Web을 서비스 하자 > login.java > loginok.java (웹객체 상속 ...) > 웹에서 사용하는 자바(servlet)
  		>>단점 : 배우기 어렵다 , 디자인 작업 (힘들어요 ) , 협업(x)
  		
  				[ 서블릿에서 디자인 코드 ]
  			  	response.setContentType("text/html;charset=UTF-8");
  				PrintWriter out = response.getWriter();
  				out.print("<html>");
  					out.print("<head><title>HELLO</title></head>");
  					out.print("<body>");
  						out.print("현재 날짜 : " + new Date() + "<br>");
  						out.print("<script>alert('경고')</script>");
  					out.print("</body>");
  				out.print("</html>");	
  		>> JSP 탄생 >> 장점 >> UI 작업 >> web page >> html base >> 디자인 good >> 단점 java코드 <% ...안에
  		>> 혼재 (JAVA + UI) >> 힘들어....
  				
  		정리)
  	서로의 장점을 살리자 (현대적인 프로그래밍은 잘하는 것을 키워 주자 , [업무의 효율] ) >> MVC 패턴 도입
  	>> JSP(UI) + JAVA(순수한 자바 코드-서버,백엔드) + servlet(클라이언트 요청 파악, 웹 요청,응답 [조정]의 역할)
  	분업 하자
  	Model (DTO , DAO)  >> 순수한 JAVA (POJO --어떤 라이브러리 등을 의존하지 않는 순수한 자바파일)
  	View  (UI)         >> JSP
  	Controller(중앙통제) >> Servlet 
  	
  	MVC 패턴으로 현재까지 개발 되고 있어요 >> 추가적으로 [MSA]등등 나오고 있어요--micreo service 
  	>> model1 (JSP 모든 요청과 응답을 처리=> controller가 없음 => 확장시 문제가 생김 ) + Model  >> 동생에게 게시판 하나 만들어 주고 싶어요
  	>> model2 (Servlet 통한 요청과 응답을 처리 ) + MVC >> model2 기반의 MVC 패턴으로 프로젝트 해 보았어 >> 기업환경
  	
  	서버[웹서버(engineX : 로드밸런싱 등 역할 많다) vs WAS]
  	html 서비스 
  	웹서버 있으면 되요 (아파치)
  	ex) 아파치 설치 >> 특정 폴더 >> index.html, login.html , login.css >> 요청 >>http://www.it.co.kr/login.html
      클라이언트가 해석가능한 파읾만 던진다>> 아파치 웹서버 >> 요청을 받아서 >> login.html 존재 확인 >> 클라이언트에게 전달 >> 받은(해석 하는 클라이언트 서버) 클라이언트 웹브라우져 해서 화면 출력

      jsp or servlet 사용 (서버로 기술) 다이나믹한 웹서버
      ex) 톰켓(아파치 톰켓 설치) >> 웹서버 + WAS >> 요청 >> http://www.it.co.kr/login.jsp >> 실행 파일 (없어요) >>
          jsp 컴파일 >> class 파일 생성 >> class 파일 실행 (정적 데이터(html) + 서버코드(java) 실행>동적데이터>서버코드 실행해서 만든 결과 Text)
          >>결과된 결과(클라이언트 웹 브라우져가 해서 가능한 파일) >> 전달(응답 : response)
          
          WAS > jsp요청 > compile(login.jsp.java) > 실행(login.jsp.class) > 실행 (정적+동적//합치는 작업) > 응답
          
  	
      	상식 퀴즈)
   		login.asp , login.aspx(MS: c#, vb.net으로 만든 웹), php , jsp 공통점은 무었일까
   		속도는 php가 가장빠름(웹 목적, 쇼핑몰, 개인웹사이트, 템플릿많ㄹ음)
   		코드 노출이 안되요(서버코드는 따로갖고있음) >> 보안에 좋아요 >> 클라이언트는 실행 결과만 보아요 (text 또는 html 형태로)
   		
   		서버 오픈 (2025 05 18 12:00)
   		홍길동 최초 요청자 >> http://www.it.or.kr/default.jsp -> WAS (처음 , 기존 실행한적이 있는지 >> 클래스파일 있는지, 있으면 바로 실행)
   		처음(실행파일이 없어요) > 컴파일 > class 만들고 > 실행 > 정적+동적 결합 > 서비스
   		
   		길동 두번쨰 요청자 >> http://www.it.or.kr/default.jsp -> WAS (처음 , 기존 실행적이 있는지)
   		>> 실행파일 존재 (실행) >> 정적 + 동적 결합 > 서비스
   		
   		질문) jsp 다시 컴파일하고 실행파일이 만들어지는 언제 
          1. 개발자가 코드 수정 배포 (서버가 수정된 거 업데이트)
          2. 웹 서버 재시작 (실행파일 날라가서 다시 받음)
    
        질문)
		2025 현재 JSP(UI) 사용 될까? (신규 X) >> 전자정보프레임워크도 바뀌는 추세 > Template > Thymeleaf, 머스테치(탬플릿 > 확장자 mustache)  >> 확장자가 html..(장점) 
		JSP, Velocity : 스프링 부트에서 권장하지 않음
		
		서버에서 데이터를 가공하는 방식
		Freemarker :탬플릿 엔진으로 너무 과한 기능 지원
		Thymeleaf: 스프링에서 적극 지원
		Mustache : 문법이 쉬움
          
		[MPA(JSP) : 서버가 모든 역할 다함 <-> SPA (react, view => Single Page Application) : 서버는 데이터만 제공]
          
          JSP는 디자인보완이 목적이라 html파일이 들어가있음
          */
          
 
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" ");

 
 /*
 자바 코드 사용 영역
 JSP 구성요소
 1. 선언부 : page language = "java" > page : 지시자 > 사용언어, 인코딩, import
 	<%@ page language = "java">
 	<%@ page import = "java.util.Date">
 	
 2. 스크립트 요소
 2.1 스크립트 릿 <% 안에 java 코드 사용 영역
 2.2 표현식 (출력하는 방법) : 출력하는 대상 (클라이언트 브라우저) => 웹페이지가 해석할 수 있는 것으로 만들어짐
  	: <%=  (=의 의미 : 서버쪽에 있는 내용을 클라이언트에 쓰겠다 >> response.write)
 2.3 선언부 (공통자원) : 공통함수를 모아서 <%! ... >
 */
 

      out.write("\r\n");
      out.write("\r\n");

//java 코드
String name = "hello world";

      out.write(" \r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>JSP 실행하기</h3>\r\n");
      out.write("  날짜 : ");
      out.print( date );
      out.write("<hr>\r\n");
      out.write("  이름 : ");
      out.print( name );
      out.write("<hr>\r\n");
      out.write("  함수 : ");
      out.print( add(100,200) );
      out.write("<hr>\r\n");
      out.write("	");

	
	int result  = add(1,2); 
	
	
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write(" 결과 : ");
      out.print( result );
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
