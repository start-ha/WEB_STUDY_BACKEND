/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.46
 * Generated at: 2025-09-22 02:44:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Ex04_005flogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");

	/*
	1. 한글처리
	2. 데이터 받기
	3. 로직처리 (비지니스) > DB작업(CRUD) :JSP가 하진 않음
	
	내장객체(WAS 톰켓)
	1. request (클라이언트의 정보를 담고 있는 객체 : 요청 페이지당 한 개 : 웹서버에서 생성 웹서버의 메모리에 저장)
	2. response (웹서버 ... 응답객체)
	3. session (클라이언트 마다 고유하게 생성되는 고유객체 : 접속자 100명이면 100개의 세션 객체 생성)
	4. application (전역-공유 자원: 모든 접속자(세션)이 공유하는 객체)
	5. out (출력객체 : java의 print) out.print
	
	위 5개의 객체는 JSP에서 new 없이 그냥 사용 가능 >> 미리 생성되어 있음
	
	*/
	request.setCharacterEncoding("UTF-8");
	String id = request.getParameter("id");
	
	/*
		model1 .... MVC 흉내
		JSP가 요청받음
		>Model (DTP,DAO)
		MemberDao memberDao = new MemberDao(); 
		MemberDto memberDto = new MemberDto(); 

		DAO로 전체조회 I U D W 5개 만들수 있음
		
		memberDto.setId(id); Dto로 데이터를 받음
		
		int result = member.Dao.insertData(memberDto;)
		
		클라이언트에게 가입성공 메시지 전달
	
	*/



      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	1. 입력값 : ");
      out.print(id );
      out.write("<br>\r\n");
      out.write("	2. 접속한 클라이언트 IP : ");
      out.print( request.getRemoteAddr() );
      out.write("<br>\r\n");
      out.write("	3. 포트 : ");
      out.print( request.getServerPort() );
      out.write("<br> \r\n");
      out.write("	4. 경로 : ");
      out.print( request.getContextPath() );
      out.write("<br>\r\n");
      out.write("	\r\n");
      out.write("	<!-- \r\n");
      out.write("	웹에서 바라보는 경로 \r\n");
      out.write("	: 가상디렉토리(홈 디렉토리, 사이트명) : 192.168.0.12/Web/a.jsp \r\n");
      out.write("	<=> (실제 경로 : C:\\\\Web\\\\WebApp\\\\a.jsp)\r\n");
      out.write("	웹과 웹서버의 경로는 다르다\r\n");
      out.write("	 -->\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
